## Ex.1
release_date = 26
current_date = 22

# Create a conditional loop while current_date is less than or equal to the release_date
while current_date <= release_date:

    # Promote purchases
    if current_date <= 24:
        print("Purchase before the 25th for early access")

    # Check if the date is equal to the 25th
    elif current_date == 25:
        print("Coming soon!")

    else:
        print("Available now!")

    # Increment current_date by one
    current_date += 1

## Ex.2
course_ratings = {"LLM Concepts": 4.7,
                      "Introduction to Data Pipelines": 4.75,
                      "AI Ethics": 4.62,
                      "Introduction to dbt": 4.81}

    # Print the number of key-value pairs
num_courses = len(course_ratings)
print(num_courses)

## Ex.3
course_completions = [97, 83, 121, 205, 56, 174, 92, 117, 164]

# Find the number of courses
num_courses = len(course_completions)
print(num_courses)
most_popular_course = "Introduction to dbt"

# How many characters are in most_popular_course?
title_length = len(most_popular_course)
print(title_length)

# Print the total number of course completions
print(sum(course_completions))

# Print the average number of completions, rounded to one decimal places
print(round(sum(course_completions) / len(course_completions), 1))

## Modules.
## Ex.4

# Import the string module
import string

# Print all ASCII lowercase characters
print(string.ascii_lowercase)

# Print all punctuation
print(string.punctuation)


## 5
# Import date from the datetime module
from datetime import date

# Create a variable called deadline
deadline = date(2024, 1, 19)

# Check the data type
print(type(deadline))

# Print the deadline
print(deadline)

## 6
# Create the clean_string function
def clean_string(text):
    # Replace spaces with underscores
    no_spaces = text.replace("", "_")

    # Convert to lowercase
    clean_text = no_spaces.lower()

    # Return the final text as an output
    return clean_text


converted_text = clean_string("I LoVe dATaCamP!")
print(converted_text)


## 7 Practice

def clean_string(text):
    no_spaces = text.replace("_", " ")
    clean_text = no_spaces.lower()
    return clean_text

converted_text = clean_string("I_Know_You!")
print(converted_text)

## Building a password checker
password = "not_very_secure_2023"


# Define the password_checker function
def password_checker(submission):
    #  Check that the password variable and the submission match
    if password == submission:
        print("Successful login!")

    #  Otherwise, print "Incorrect password"
    else:
        print("Incorrect password")


# Call the function
print(password_checker("NOT_VERY_SECURE_2023"))
## Incorrect password
##   None

## 8

# Define clean_text
def clean_text(text, remove=None):
  if remove != None:
    clean_text = text.replace(remove, "")
    clean_text = clean_text.lower()
    return clean_text
  else:
    clean_text = text.lower()
    return clean_text

  ## 9
  # Create the convert_data_structure function
def convert_data_structure(data, data_type="list"):
    if data_type == "tuple":
        data = tuple(data)

        # Else if data_type is "set", convert to a set
    elif data_type == "set":
        data = set(data)

        # Otherwise (e.g., if data_type is "list" or anything else), convert to a list
    else:
        data = list(data)

    return data

    # --- Examples of calling the function ---

print("--- Converting a set to a set (no change, but confirms type) ---")
original_set = {"a", 1, "b", 2, "c", 3}
converted_to_set = convert_data_structure(original_set, data_type="set")
print(f"Original: {original_set}, Type: {type(original_set)}")
print(f"Converted: {converted_to_set}, Type: {type(converted_to_set)}")
print("-" * 40)

## 10  CREARTING DOCSTRINGS
# Create the convert_data_type function
def convert_data_structure(data, data_type="list"):
    # Add a multi-line docstring
    """
    Convert a data structure to a list, tuple, or set.

    Args:
        data (list, tuple, or set): A data structure to be converted.
      data_type (str): String representing the type of structure to convert data to.

    Returns:
        data (list, tuple, or set): Converted data structure.
    """
    if data_type == "tuple":
        data = tuple(data)
    elif data_type == "set":
        data = set(data)
    else:
        data = list(data)
    return data


print(help(convert_data_structure))

## 11 Adding arbitrary arguments
# Define a function called concat
def concat(*args):
    # Create an empty string
    result = ""

    # Iterate over the Python args tuple
    for arg in args:
        result += " " + arg
    return result


# Call the function
print(concat("Python", "is", "great!"))


## 12. Arbitrary keywords

# Define a function called concat
def concat(**kwargs):
    # Create an empty string
    result = ""

    # Iterate over the Python kwargs
    for value in kwargs.values():
        result += " " + value
    return result


# Call the function
print(concat(start="Python", middle="is", end="great!"))

## 13. Lambda Functions
sale_price = 29.99

# Define a lambda function called add_tax
add_tax = lambda x: x* 1.2

# Call the lambda function
print(add_tax(sale_price))


# 13. One line lambda
sale_price = 29.99

# Call a lambda function adding 20% to sale_price
print((lambda x: x * 1.2)(sale_price))

# 14. Lambda functions with iterables

sales_prices = [29.99, 9.95, 14.50, 39.75, 60.00]

# Create add_taxes to add 20% to each item in sales_prices
add_taxes = map(lambda x: x * 1.2, sales_prices)

# Create the updated list, sales_plus_tax
sales_plus_tax = list(add_taxes)

# Print the new list with updated values
print(sales_plus_tax)

## 15. Avoiding Errors

def snake_case(text):
    # Attempt to clean the text
    try:
        # Swap spaces for underscores
        clean_text = ____.____("____", "____")
        clean_text = clean_text.lower()
    # Run this code if an error occurs
    except:
        print("The snake_case() function expects a string as an argument, please check the data type provided.")


snake_case("User Name 187")

## Running Errors
def snake_case(text):
    # Check the data type
    if type(text) == str:
        clean_text = text.replace(" ", "_")
        clean_text = clean_text.lower()
    else:
        # Return a TypeError error if the wrong data type was used
        raise TypeError(
            "The snake_case() function expects a string as an argument, please check the data type provided.")


snake_case("User Name 187")
